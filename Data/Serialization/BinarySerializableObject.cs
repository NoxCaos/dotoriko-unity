//
//  BinarySerializableObject.cs
//
//  Author:
//       Denis Oleynik <denis@meliorgames.com>
//
//  Copyright (c) 2013 Melior Games Inc.
//
//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Reflection;

namespace DotOriko.Data.Serialization
{
	public sealed class SerializableField:Attribute
	{
		public readonly int Index;

		public SerializableField(int index)
		{
			Index = index;
		}

		public SerializableField(){}
	}

	[Serializable]
	public abstract class BinarySerializableObject:ISerializable
	{
		#region ISerializable implementation

		public void GetObjectData (SerializationInfo info, StreamingContext context)
		{
			foreach(FieldInfo property in this.GetType().GetFields())
			{
				foreach(SerializableField attribute in 
				        property.GetCustomAttributes(typeof(SerializableField),true))
				{
					if(property.FieldType.IsEnum)
					{
						info.AddValue(attribute.Index.ToString(), property.GetValue(this).ToString());
					}
					else
					if (null != property.GetValue(this))
					{
						info.AddValue(attribute.Index.ToString(),  property.GetValue(this));
					}
				}
			}
		}

		#endregion

		public BinarySerializableObject ()
		{
		}

		public BinarySerializableObject (SerializationInfo info, StreamingContext context)
		{
			Dictionary<string, SerializationEntry> entryByNamesMap = new Dictionary<string, SerializationEntry>();
			foreach(SerializationEntry entry in info) 
			{
				entryByNamesMap.Add(entry.Name, entry);
			}

			string name;
			foreach(FieldInfo property in this.GetType().GetFields())
			{
				foreach(SerializableField attribute in 
				        property.GetCustomAttributes(typeof(SerializableField),true))
				{
					name = attribute.Index.ToString();

					if(property.FieldType.IsEnum)
					{
						property.SetValue(this, Enum.Parse(property.FieldType,info.GetString(name)));
					}
					else
					if (entryByNamesMap.ContainsKey(name))
					{
						property.SetValue(this, info.GetValue(name, property.FieldType));
					}
				}
			}
		}
	}
}